/*
 * This file is generated by jOOQ.
*/
package com.zipHandle.dao.performance_schema.tables.records;


import com.zipHandle.dao.performance_schema.tables.MutexInstances;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.TableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MutexInstancesRecord extends TableRecordImpl<MutexInstancesRecord> implements Record3<String, ULong, ULong> {

    private static final long serialVersionUID = 120438901;

    /**
     * Setter for <code>performance_schema.mutex_instances.NAME</code>.
     */
    public void setName(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>performance_schema.mutex_instances.NAME</code>.
     */
    public String getName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>performance_schema.mutex_instances.OBJECT_INSTANCE_BEGIN</code>.
     */
    public void setObjectInstanceBegin(ULong value) {
        set(1, value);
    }

    /**
     * Getter for <code>performance_schema.mutex_instances.OBJECT_INSTANCE_BEGIN</code>.
     */
    public ULong getObjectInstanceBegin() {
        return (ULong) get(1);
    }

    /**
     * Setter for <code>performance_schema.mutex_instances.LOCKED_BY_THREAD_ID</code>.
     */
    public void setLockedByThreadId(ULong value) {
        set(2, value);
    }

    /**
     * Getter for <code>performance_schema.mutex_instances.LOCKED_BY_THREAD_ID</code>.
     */
    public ULong getLockedByThreadId() {
        return (ULong) get(2);
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<String, ULong, ULong> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<String, ULong, ULong> valuesRow() {
        return (Row3) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return MutexInstances.MUTEX_INSTANCES.NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<ULong> field2() {
        return MutexInstances.MUTEX_INSTANCES.OBJECT_INSTANCE_BEGIN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<ULong> field3() {
        return MutexInstances.MUTEX_INSTANCES.LOCKED_BY_THREAD_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ULong value2() {
        return getObjectInstanceBegin();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ULong value3() {
        return getLockedByThreadId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MutexInstancesRecord value1(String value) {
        setName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MutexInstancesRecord value2(ULong value) {
        setObjectInstanceBegin(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MutexInstancesRecord value3(ULong value) {
        setLockedByThreadId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MutexInstancesRecord values(String value1, ULong value2, ULong value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MutexInstancesRecord
     */
    public MutexInstancesRecord() {
        super(MutexInstances.MUTEX_INSTANCES);
    }

    /**
     * Create a detached, initialised MutexInstancesRecord
     */
    public MutexInstancesRecord(String name, ULong objectInstanceBegin, ULong lockedByThreadId) {
        super(MutexInstances.MUTEX_INSTANCES);

        set(0, name);
        set(1, objectInstanceBegin);
        set(2, lockedByThreadId);
    }
}
